/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.19;

contract Auth {
    enum Roles { OPERATOR, ADMIN }

    error Unauthorized();

    error WrongRole();

    event AdminAdded(address indexed newAdmin);

    event AdminDeleted(address indexed oldAdmin);

    event OperatorAdded(address indexed newOperator);

    event OperatorDeleted(address indexed oldOperator);

    mapping(address => bool) public operators;
    mapping(address => bool) public admins;

    /// ///////////////////////////////////////////////////////////*/
    modifier onlyAdmin() {
        if (!admins[msg.sender]) {
            revert Unauthorized();
        }
        _;
    }

    modifier onlyOperator() {
        if (!operators[msg.sender]) {
            revert Unauthorized();
        }
        _;
    }

    constructor(address initialAdmin) {
        admins[initialAdmin] = true;
        operators[initialAdmin] = true;
    }

    /// ///////////////////////////////////////////////////////////*/
    function addAdmin(address newAdmin) external onlyAdmin() {
        admins[newAdmin] = true;
        emit AdminAdded(newAdmin);
    }

    function deleteAdmin(address oldAdmin) external onlyAdmin() {
        admins[oldAdmin] = false;
        emit AdminDeleted(oldAdmin);
    }

    function addOperator(address newOperator) external onlyAdmin() {
        operators[newOperator] = true;
        emit OperatorAdded(newOperator);
    }

    function deleteOperator(address oldOperator) external onlyAdmin() {
        operators[oldOperator] = false;
        emit OperatorDeleted(oldOperator);
    }
}
