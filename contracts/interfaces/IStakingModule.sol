// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

interface IStakingModule {
    /**
     * @dev Structure for passing information about the validator deposit data.
     * @param operator - address of the operator.
     * @param pubkey - BLS public key of the validator, generated by the operator.
     * @param withdrawal_credentials - withdrawal credentials used for generating the deposit data.
     * @param signature - BLS signature of the validator, generated by the operator.
     * @param deposit_data_root - hash tree root of the deposit data, generated by the operator.
     */
    struct ValidatorData {
        address operator;
        bytes pubkey;
        bytes32 withdrawal_credentials;
        bytes signature;
        bytes32 deposit_data_root; // more efficient to be calculated off-chain
    }

    function deposit(ValidatorData calldata data) external payable;

    function oracleUpdate(uint256 newBalance, uint256 newValidators) external;

    function validators() external view returns (uint256);

    function balance() external view returns (uint256);

    function MEV_ETH() external view returns (address);

    function VALIDATOR_DEPOSIT_SIZE() external view returns (uint256);

    // onlyAdmin Functions
    function payValidatorWithdraw(uint256 amount) external;
    function recoverToken(address token, address recipient, uint256 amount) external;
}
