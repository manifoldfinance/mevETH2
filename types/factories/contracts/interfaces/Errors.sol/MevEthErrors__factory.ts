/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  MevEthErrors,
  MevEthErrorsInterface,
} from "../../../../contracts/interfaces/Errors.sol/MevEthErrors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "BeaconDepositFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "BelowMinimum",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsStakingAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBufferedEth",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPendingMevEthShareVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPendingStakingModule",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWithdrawalCredentials",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxValidatorError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughEth",
    type: "error",
  },
  {
    inputs: [],
    name: "OperatorMaxValidatorsReached",
    type: "error",
  },
  {
    inputs: [],
    name: "OperatorNotCommitted",
    type: "error",
  },
  {
    inputs: [],
    name: "OperatorsNotCommitted",
    type: "error",
  },
  {
    inputs: [],
    name: "PrematureMevEthShareVaultUpdateFinalization",
    type: "error",
  },
  {
    inputs: [],
    name: "PrematureStakingModuleUpdateFinalization",
    type: "error",
  },
  {
    inputs: [],
    name: "ReportedBeaconValidatorsDecreased",
    type: "error",
  },
  {
    inputs: [],
    name: "ReportedBeaconValidatorsGreaterThanTotalValidators",
    type: "error",
  },
  {
    inputs: [],
    name: "StakingPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "TooManyValidatorRegistrations",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferExceedsAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ValidatorPreviouslyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroShares",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroValue",
    type: "error",
  },
] as const;

export class MevEthErrors__factory {
  static readonly abi = _abi;
  static createInterface(): MevEthErrorsInterface {
    return new Interface(_abi) as MevEthErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MevEthErrors {
    return new Contract(address, _abi, runner) as unknown as MevEthErrors;
  }
}
