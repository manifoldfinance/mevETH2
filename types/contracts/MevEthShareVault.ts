/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MevEthShareVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MEV_ETH"
      | "addAdmin"
      | "addOperator"
      | "admins"
      | "deleteAdmin"
      | "deleteOperator"
      | "operators"
      | "payRewards"
      | "recoverToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminDeleted"
      | "OperatorAdded"
      | "OperatorDeleted"
      | "TokenRecovered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MEV_ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MEV_ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminDeletedEvent {
  export type InputTuple = [oldAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorAddedEvent {
  export type InputTuple = [newOperator: AddressLike];
  export type OutputTuple = [newOperator: string];
  export interface OutputObject {
    newOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorDeletedEvent {
  export type InputTuple = [oldOperator: AddressLike];
  export type OutputTuple = [oldOperator: string];
  export interface OutputObject {
    oldOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRecoveredEvent {
  export type InputTuple = [
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [recipient: string, token: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MevEthShareVault extends BaseContract {
  connect(runner?: ContractRunner | null): MevEthShareVault;
  waitForDeployment(): Promise<this>;

  interface: MevEthShareVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MEV_ETH: TypedContractMethod<[], [string], "view">;

  addAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  addOperator: TypedContractMethod<
    [newOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  deleteAdmin: TypedContractMethod<
    [oldAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteOperator: TypedContractMethod<
    [oldOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  payRewards: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  recoverToken: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MEV_ETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[newOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deleteAdmin"
  ): TypedContractMethod<[oldAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteOperator"
  ): TypedContractMethod<[oldOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "payRewards"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverToken"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminDeleted"
  ): TypedContractEvent<
    AdminDeletedEvent.InputTuple,
    AdminDeletedEvent.OutputTuple,
    AdminDeletedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorAdded"
  ): TypedContractEvent<
    OperatorAddedEvent.InputTuple,
    OperatorAddedEvent.OutputTuple,
    OperatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorDeleted"
  ): TypedContractEvent<
    OperatorDeletedEvent.InputTuple,
    OperatorDeletedEvent.OutputTuple,
    OperatorDeletedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRecovered"
  ): TypedContractEvent<
    TokenRecoveredEvent.InputTuple,
    TokenRecoveredEvent.OutputTuple,
    TokenRecoveredEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminDeleted(address)": TypedContractEvent<
      AdminDeletedEvent.InputTuple,
      AdminDeletedEvent.OutputTuple,
      AdminDeletedEvent.OutputObject
    >;
    AdminDeleted: TypedContractEvent<
      AdminDeletedEvent.InputTuple,
      AdminDeletedEvent.OutputTuple,
      AdminDeletedEvent.OutputObject
    >;

    "OperatorAdded(address)": TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;
    OperatorAdded: TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;

    "OperatorDeleted(address)": TypedContractEvent<
      OperatorDeletedEvent.InputTuple,
      OperatorDeletedEvent.OutputTuple,
      OperatorDeletedEvent.OutputObject
    >;
    OperatorDeleted: TypedContractEvent<
      OperatorDeletedEvent.InputTuple,
      OperatorDeletedEvent.OutputTuple,
      OperatorDeletedEvent.OutputObject
    >;

    "TokenRecovered(address,address,uint256)": TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;
    TokenRecovered: TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;
  };
}
