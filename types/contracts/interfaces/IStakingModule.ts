/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStakingModule {
  export type ValidatorDataStruct = {
    operator: AddressLike;
    pubkey: BytesLike;
    withdrawal_credentials: BytesLike;
    signature: BytesLike;
    deposit_data_root: BytesLike;
  };

  export type ValidatorDataStructOutput = [
    operator: string,
    pubkey: string,
    withdrawal_credentials: string,
    signature: string,
    deposit_data_root: string
  ] & {
    operator: string;
    pubkey: string;
    withdrawal_credentials: string;
    signature: string;
    deposit_data_root: string;
  };
}

export interface IStakingModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MEV_ETH"
      | "VALIDATOR_DEPOSIT_SIZE"
      | "balance"
      | "deposit"
      | "oracleUpdate"
      | "payValidatorWithdraw"
      | "recoverToken"
      | "validators"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MEV_ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_DEPOSIT_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [IStakingModule.ValidatorDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleUpdate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payValidatorWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MEV_ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_DEPOSIT_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export interface IStakingModule extends BaseContract {
  connect(runner?: ContractRunner | null): IStakingModule;
  waitForDeployment(): Promise<this>;

  interface: IStakingModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MEV_ETH: TypedContractMethod<[], [string], "view">;

  VALIDATOR_DEPOSIT_SIZE: TypedContractMethod<[], [bigint], "view">;

  balance: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [data: IStakingModule.ValidatorDataStruct],
    [void],
    "payable"
  >;

  oracleUpdate: TypedContractMethod<
    [newBalance: BigNumberish, newValidators: BigNumberish],
    [void],
    "nonpayable"
  >;

  payValidatorWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  recoverToken: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MEV_ETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_DEPOSIT_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [data: IStakingModule.ValidatorDataStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "oracleUpdate"
  ): TypedContractMethod<
    [newBalance: BigNumberish, newValidators: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payValidatorWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverToken"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
